# manage dein itself
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  :command Dre :call dein#recache_runtimepath()
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'windwp/nvim-autopairs'
lua_add='''
require("nvim-autopairs").setup()
'''
[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_func = ['context_filetype#get']
hook_source = '''
let g:context_filetype#filetypes = extend(
      \ copy(context_filetype#default_filetypes()),
      \ {'markdown': values(map(
      \   {'\(\h\w*\)': '\1', 'viml': 'vim'},
      \   { key, val -> {
      \     'start': '^\s*```\s*' .. key,
      \     'end': '^\s*```$',
      \     'filetype': val,
      \ } }))})

let g:context_filetype#ignore_patterns = {
      \ 'toml': ['^\s*#\s*'],
      \ }
'''

[[plugins]]
repo = 'thinca/vim-partedit'
on_ft = 'toml'
hook_add = '''
let g:partedit#opener = 'vsplit'
function! MyPartedit() abort
  let context = context_filetype#get()
  if context.range == [[0, 0], [0, 0]]
    echohl WarningMsg
    echomsg '[partedit] Context is not found'
    echohl NONE
    return
  endif
  call partedit#start(context.range[0][0], context.range[1][0],
        \ {'filetype': context.filetype})
  nnoremap <buffer> q <Cmd>call LeavePartedit()<CR>
endfunction

function! LeavePartedit() abort
  silent! nunmap <buffer> q
  execute 'ParteditEnd<Bar>close' 
endfunction

nnoremap <buffer><silent> <leader>pe <Cmd>call MyPartedit()<CR>
'''


###################### appearance ############################

# status line
[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
lua_add='''
require('dein.statusline')
'''

# indent
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_auto_colors = 0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=239
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=237
  let g:indent_guides_guide_size = 1
'''

# notify
[[plugins]]
repo = "rcarriga/nvim-notify"

