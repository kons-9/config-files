# toml
[[plugins]]
repo = "Saecki/crates.nvim"
tag = "v0.3.0"
on_if = "expand('%:t') == 'Cargo.toml'"
lua_post_source = '''
require('crates').setup()
'''

[[plugins]]
repo = 'thinca/vim-partedit'
on_func = ['MyPartedit']
hook_add = '''
let g:partedit#opener = 'vsplit'
function! MyPartedit() abort
  let context = context_filetype#get()
  if context.range == [[0, 0], [0, 0]]
    echohl WarningMsg
    echomsg '[partedit] Context is not found'
    echohl NONE
    return
  endif
  call partedit#start(context.range[0][0], context.range[1][0],
        \ {'filetype': context.filetype})
  nnoremap <buffer> q <Cmd>call LeavePartedit()<CR>
endfunction

function! LeavePartedit() abort
  silent! nunmap <buffer> q
  execute 'ParteditEnd | close' 
endfunction

nnoremap <silent> <leader>pe :call MyPartedit()<CR>
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
on_func = ['context_filetype#get']
hook_source = '''
let g:context_filetype#filetypes = extend(
      \ copy(context_filetype#default_filetypes()),
      \ {'markdown': values(map(
      \   {'\(\h\w*\)': '\1', 'viml': 'vim'},
      \   { key, val -> {
      \     'start': '^\s*```\s*' .. key,
      \     'end': '^\s*```$',
      \     'filetype': val,
      \ } }))})

let g:context_filetype#ignore_patterns = {
      \ 'toml': ['^\s*#\s*'],
      \ }
'''

[[plugins]]
repo = 'dkarter/bullets.vim'
on_ft = "markdown"

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = "markdown"
build = 'sh -c "cd app && yarn install"' 

# tag
[[plugins]]
repo = 'alvan/vim-closetag'
on_ft = ["html", "javascript", "javascriptreact", "typescript", "typescriptreact", "vue", "svelte", "xml", "xhtml", "markdown"]

hook_add = '''
let g:closetag_enable_react_fragment = 1
'''

# git
[[plugins]]
repo = 'lambdalisue/gin.vim'
on_cmd = ['Gin']
depends=['denops.vim']

# convinient
[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = ['QuickRun']
lua_add = '''
vim.keymap.set('n', '<leader>rr', "<cmd>QuickRun<cr>", { noremap = true, silent = true })
vim.g.quickrun_config = {}
local tmp = vim.g.quickrun_config 
tmp.python = {command = 'python3'}
vim.g.quickrun_config = tmp
'''
lua_post_source = '''
'''

# terminal
[[plugins]]
repo = "akinsho/toggleterm.nvim"
on_cmd = ['ToggleTerm']
lua_post_source = '''
require('toggleterm').setup()
'''
lua_add = '''
-- [ToggleTerm]
vim.keymap.set('n', '<C-`>', ':ToggleTerm size=20<CR>', {silent=true, noremap=true})
vim.keymap.set('t', '<C-`>', '<C-\\><C-n>:ToggleTermToggleAll<CR>', {silent=true, noremap=true})
'''

[[plugins]]
repo = 'tpope/vim-commentary'
on_cmd = ['Commentary']
on_event = ['ModeChanged']
lua_add = '''
vim.keymap.set('n', 'gcc', "<cmd>Commentary<cr>", { noremap = true, silent = true })
'''


# movement
[[plugins]]
repo = 'easymotion/vim-easymotion'
on_event = 'CursorMoved'
[[plugins]]
repo = 'gen740/SmoothCursor.nvim'
on_event = 'CursorMoved'
lua_post_source='''
require('smoothcursor').setup({
  speed = 50,
  fancy = {
    enable = true,       -- enable fancy mode
    head = { cursor = "▷", texthl = "SmoothCursor", linehl = nil },
    body = {
      { cursor = "", texthl = "SmoothCursorRed" },
      { cursor = "", texthl = "SmoothCursorOrange" },
      { cursor = "●", texthl = "SmoothCursorYellow" },
      { cursor = "●", texthl = "SmoothCursorGreen" },
      { cursor = "•", texthl = "SmoothCursorAqua" },
      { cursor = ".", texthl = "SmoothCursorBlue" },
      { cursor = ".", texthl = "SmoothCursorPurple" },
    },
    tail = { cursor = nil, texthl = "SmoothCursor" }
  },
})
'''
